/** Declaration file generated by dts-gen */

export class DataFrame {
    constructor(data: any, columns: any, ...args: any[]);

    bisect(percentage: any): any;

    cast(columnName: any, typeFunction: any): any;

    castAll(typeFunctions: any): any;

    chain(...args: any[]): any;

    count(): any;

    countValue(valueToCount: any, ...args: any[]): any;

    diff(dfToDiff: any, columnNames: any): any;

    dim(): any;

    distinct(columnName: any): any;

    drop(columnName: any): any;

    dropDuplicates(...args: any[]): any;

    dropMissingValues(columnNames: any): any;

    fillMissingValues(replacement: any, columnNames: any): any;

    filter(condition: any): any;

    find(condition: any): any;

    fullJoin(dfToJoin: any, columnNames: any): any;

    getRow(index: any): any;

    groupBy(...args: any[]): any;

    head(...args: any[]): any;

    innerJoin(dfToJoin: any, columnNames: any): any;

    join(dfToJoin: any, columnNames: any, ...args: any[]): any;

    leftJoin(dfToJoin: any, columnNames: any): any;

    listColumns(): any;

    map(func: any): any;

    outerJoin(dfToJoin: any, columnNames: any): any;

    push(...args: any[]): any;

    reduce(func: any, init: any): any;

    reduceRight(func: any, init: any): any;

    rename(columnName: any, replacement: any): any;

    renameAll(newColumnNames: any): any;

    replace(value: any, replacement: any, columnNames: any): any;

    restructure(newColumnNames: any): any;

    rightJoin(dfToJoin: any, columnNames: any): any;

    sample(percentage: any): any;

    select(...args: any[]): any;

    setRow(index: any, ...args: any[]): any;

    show(...args: any[]): any;

    shuffle(): any;

    slice(startIndex: any, endIndex: any): any;

    sortBy(columnNames: any, ...args: any[]): any;

    tail(...args: any[]): any;

    toArray(columnName: any): any;

    toCSV(...args: any[]): any;

    toCollection(ofRows: any): any;

    toDSV(...args: any[]): any;

    toDict(): any;

    toJSON(...args: any[]): any;

    toPSV(...args: any[]): any;

    toTSV(...args: any[]): any;

    toText(...args: any[]): any;

    transpose(tranposeColumnNames: any): any;

    union(dfToUnion: any): any;

    unique(columnName: any): any;

    where(condition: any): any;

    withColumn(columnName: any, ...args: any[]): any;

    static defaultModules: any[];

    static fromCSV(...args: any[]): any;

    static fromDSV(...args: any[]): any;

    static fromJSON(...args: any[]): any;

    static fromPSV(...args: any[]): any;

    static fromTSV(...args: any[]): any;

    static fromText(...args: any[]): any;

    static setDefaultModules(...args: any[]): void;

}

export class Row {
    constructor(data: any, columns: any);

    delete(columnToDel: any): any;

    get(columnToGet: any): any;

    has(columnName: any): any;

    hash(): any;

    select(...args: any[]): any;

    set(columnToSet: any, value: any): any;

    size(): any;

    toArray(): any;

    toDict(): any;

}

export namespace DataFrame {
    class sql {
        constructor(df: any);

        register(tableName: any, ...args: any[]): any;

        static dropTable(tableName: any): void;

        static dropTables(): void;

        static listTables(): any;

        static registerTable(df: any, tableName: any, ...args: any[]): void;

        static renameTable(tableName: any, replacement: any, ...args: any[]): void;

        static request(query: any): any;

        static tables: {
        };

    }

}

export namespace Errors {
    function ArgumentTypeError(input: any, expected: any): any;

    function FileNotFoundError(fileName: any): any;

    function MixedTypeError(...args: any[]): any;

    function NoSuchColumnError(column: any, columns: any): any;

    function SQLParseError(message: any): any;

    function TableAlreadyExistsError(tableName: any): any;

    function WrongSchemaError(columns: any, expected: any): any;

    function WrongTableNameError(tableName: any): any;

    namespace ArgumentTypeError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace FileNotFoundError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace MixedTypeError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace NoSuchColumnError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace SQLParseError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace TableAlreadyExistsError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace WrongSchemaError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace WrongTableNameError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

}

